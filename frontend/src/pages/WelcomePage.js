import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Header from "../components/Header";
import Footer from "../components/Footer";

const API_URL = "http://127.0.0.1:5000"; // Backend

function WelcomePage({ gameData, setGameData }) {
    const [loadingStatus, setLoadingStatus] = useState("");
    const [startingGame, setStartingGame] = useState(false);
    const [hideContent, setHideContent] = useState(false); // Hide UI when starting game
    const navigate = useNavigate();

    // Fetch Image & Quiz Before Game Starts
    const startGame = async () => {
        // Clear previous game data from localStorage
        localStorage.clear();
        localStorage.setItem("imageTimer", "15"); // Reset timer storage

        // Reset game state (clear previous answers & reset quiz)
        setGameData({
            imageData: null,
            quiz: [],
            playerAnswers: {}, // Reset answers
            mode: gameData.mode, // Keep selected mode
        });
        
        setHideContent(true); // Hide everything except status messages
        setLoadingStatus("Finding image online...");
        setStartingGame(true);

        try {
            // Step 1: Fetch Image & Quiz Data
            const quizRes = await axios.post(`${API_URL}/get_quiz`);

            if (!quizRes.data.image_url || !quizRes.data.quiz) throw new Error("Invalid API response");

            setLoadingStatus("Generating quiz...");

            // Step 2: Convert Quiz Data
            const formattedQuiz = parseQuiz(quizRes.data.quiz);
            if (formattedQuiz.length === 0) throw new Error("Invalid quiz format");

            // Ensure "Generating quiz..." is visible before updating to the next status
            await new Promise(resolve => setTimeout(resolve, 3000));

            setLoadingStatus("Starting game...");

            // Step 3: Save Data to State
            setTimeout(() => {
                setGameData({
                    ...gameData, // Preserve existing game data
                    imageData: { image_url: quizRes.data.image_url },
                    quiz: formattedQuiz,
                    playerAnswers: {}, // Reset answers again to ensure a clean start
                });

                setStartingGame(false);
                navigate("/image"); // Proceed to ImagePage
            }, 2000); // Simulate slight delay for smoother transition
        } catch (error) {
            console.error("Error:", error);
            alert("An error occurred. Try again.");
            setStartingGame(false);
            setHideContent(false); // Show UI again if error occurs
        }
    };

    // Convert AI quiz response into structured format
    const parseQuiz = (quizText) => {
        const questions = quizText.split("\n").filter(q => q.trim() !== "");
        return questions.map((q, index) => {
            const parts = q.split(" - ").map(part => part.trim());
            if (parts.length !== 5) return null;
            const correctAnswer = parts[1];
            const choices = [parts[1], parts[2], parts[3], parts[4]].sort(() => Math.random() - 0.5);
            return { id: index, question: parts[0], choices, correctAnswer };
        }).filter(q => q !== null);
    };

    return (
        <div className="d-flex flex-column min-vh-100">
            {/* HEADER - Always visible */}
            <Header />

            {/* MAIN CONTENT */}
            <div className="container text-center flex-grow-1 d-flex flex-column justify-content-center align-items-center">
                {hideContent ? (
                    // Show loading status dynamically
                    <h3 className="fw-bold">{loadingStatus}</h3>
                ) : (
                    // Show normal content when not loading
                    <>
                        <h2 className="fw-bold">Welcome to SnapQuiz!</h2>

                        <p className="mt-5 fs-5 text-black">
                            <strong>Your challenge: </strong>Memorize a randomly selected image from the internet and answer questions generated by AI based on what you observed.
                        </p>

                        <p className="fs-5 text-black">
                            The image will be visible for a few seconds. After that, the quiz will begin.
                        </p>
                        
                        <p className="fs-5 text-black">
                            Don't like the image you got? Start a new game!
                        </p>

                        {/* BUTTONS: Aligned next to each other */}
                        <div className="d-flex justify-content-center gap-3 mt-5">
                            <button 
                                className="btn btn-primary"
                                onClick={() => navigate("/game-mode")}
                            >
                                Select Game Mode
                            </button>

                            <button 
                                className="btn btn-success"
                                onClick={startGame}
                                disabled={startingGame} // Disable while loading
                            >
                                {startingGame ? "Loading..." : "Start Game"}
                            </button>  
                        </div>

                        <p className="mt-4"><strong>Selected Mode:</strong> {gameData.mode}</p>
                    </>
                )}
            </div>

            {/* FOOTER - Always visible */}
            <Footer />
        </div>
    );
}

export default WelcomePage;
